#ifndef CODE_GENERATOR_DEFS_HPP
#define CODE_GENERATOR_DEFS_HPP

#include <unordered_map>
#include <vector>
#include <string>

#include "../../common/intermediate-representation-tree/defs/IRTree_defs.hpp"

/*
    code generation related definitions
*/

extern const std::unordered_map<IRNodeType, std::string> nodeToJMP;

extern const std::unordered_map<IRNodeType, std::string> nodeToOppJMP;

extern const std::vector<std::string> gpRegisters;

struct CodeGeneratorThreadContext{
    // function being generated by the thread
    std::string functionName;
    // position of the first free gener purpose register (if there is no free gp registers, stack is used) 
    size_t gpFreeRegPos;
    // number for next variable (-variableNum*regSize(%rbp))
    size_t variableNum;
    // mapping variable name to its address (relative to rbp)
    std::unordered_map<std::string, std::string> variableMap;
    // generated asm code
    std::vector<std::string> asmCode;

    void init(const std::string& funcName){
        functionName = funcName;
        gpFreeRegPos = 0;
        variableNum = 1;
    }
    void reset(){
        functionName = "";
        gpFreeRegPos = 0;
        variableNum = 1;
        variableMap.clear();
        asmCode.clear();
    }
};

#endif
