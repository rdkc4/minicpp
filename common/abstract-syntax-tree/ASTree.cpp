#include "ASTree.hpp"

#include <iostream>
#include <format>

ASTree::ASTree(ASTNodeType nodeType, const Token& token) : nodeType(nodeType), token(token){}

ASTree::ASTree(ASTNodeType nodeType, const Token& token, Types type) : nodeType(nodeType), token(token), type(type){}

ASTree::~ASTree() = default;

//-----------------------------------------------------------------------------------------------------------------------------------------------------
// ADD CHILD TO AST TREE
//-----------------------------------------------------------------------------------------------------------------------------------------------------
void ASTree::pushChild(std::unique_ptr<ASTree>&& child){
    children.push_back(std::move(child));
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------
// RETURN CHILD AT GIVEN INDEX
//-----------------------------------------------------------------------------------------------------------------------------------------------------
ASTree* ASTree::getChild(size_t index){
    if(index < children.size()){
        return children.at(index).get();
    }
    return nullptr;
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------
// RETURN ALL CHILDREN
//-----------------------------------------------------------------------------------------------------------------------------------------------------
const std::vector<std::unique_ptr<ASTree>>& ASTree::getChildren() const{
    return children;
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------
// SETTERS
//-----------------------------------------------------------------------------------------------------------------------------------------------------
void ASTree::setType(Types t){
    type = t;
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------
// GETTERS
//-----------------------------------------------------------------------------------------------------------------------------------------------------
std::optional<Types> ASTree::getType() const{
    return type;
}

ASTNodeType ASTree::getNodeType() const{
    return nodeType;
}

const Token ASTree::getToken() const {
    return token;
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------
// PRINT AST NODE
//-----------------------------------------------------------------------------------------------------------------------------------------------------
std::string ASTree::toString(){
    return std::format("{} | '{}'\n", astNodeTypeToString.at(nodeType), token.value);
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------
// DISPLAY AST TREE (debbuging purposes)
//-----------------------------------------------------------------------------------------------------------------------------------------------------
void ASTree::traverse(size_t offset){
    std::cout << std::format("{}|-> {}", std::string(offset*2, ' '), toString());
    for(const auto& child:children){
        child->traverse(offset+1);
    }

}
